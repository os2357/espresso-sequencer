searchState.loadedDescShard("espresso_dev_node", 0, "Account index in the L1 wallet generated by MNEMONIC to …\nAlternate account indices generated by the mnemonics to …\nOptional list of URLs representing alternate chains where …\nOptional list of mnemonics for the alternate chains. If …\nOptional list of multisig addresses for the alternate …\nInterval between retries if a state update fails for alt …\nThe frequency of updating the light client state for alt …\nPort for connecting to the builder.\nPort for the dev node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMnemonic for an L1 wallet.\nAddress for the multisig wallet that will be the admin\nPort for connecting to the prover.\nInterval between retries if a state update fails\nA JSON-RPC endpoint for the L1 to deploy to. If this is …\nMaximum concurrent connections allowed by the HTTP API …\nPort that the HTTP API will use.\nThe frequency of updating the light client state, …")