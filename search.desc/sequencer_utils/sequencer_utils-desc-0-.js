searchState.loadedDescShard("sequencer_utils", 0, "Convenient interfaces for using <code>anvil</code> command which runs a …\nconverting a keccak256-based structured commitment (32 …\nsend a transaction and wait for confirmation before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize a type from either a string or integer in …\nImplement <code>to_fixed_bytes</code> for wrapped types\nPrepare a <code>SignerMiddleware</code> by connecting to a provider and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForce a reorg in the L1.\nRestart the server, possibly with different options.\nconverting a <code>U256</code> value into a keccak256-based structured …\nAn identifier for a particular contract.\nCache of contracts predeployed or deployed during this …\nSet of predeployed contracts.\nDeploy a contract by calling a function.\nDefault deployment function <code>LightClient.sol</code> in production\nDefault deployment function <code>LightClientMock.sol</code> for testing\nDeploy a contract by executing its deploy transaction.\nUse an already-deployed FeeContract.sol instead of …\nUse an already-deployed FeeContract.sol proxy instead of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUse an already-deployed HotShot.sol instead of deploying a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse an already-deployed LightClient.sol instead of …\nUse an already-deployed LightClient.sol proxy instead of …\nUse an already-deployed LightClientStateUpdateVK.sol …\nUse an already-deployed PlonkVerifier.sol instead of …\nWrite a .env file.\nControls how backtraces are logged on panic.\nLogging configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the logging configuration from the environment.\nInitialize logging and panic handlers based on this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTypes which can be deserialized from either integers or …\nDeserialize a type from either a string or integer in …\nDeserialize a type from either a string or integer in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")